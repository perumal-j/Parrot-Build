---
- name: "Check if Python UV exists"
  stat:
    path: "{{ ansible_env.HOME }}/.local/bin/uv"
  register: uv_manager_exists
  changed_when: false

- name: "Copying uv-install.sh"
  copy:
    src: "uv-install.sh"
    dest: "/tmp/uv-install.sh"
    mode: 0755

- name: "Installing Python UV"
  shell: /tmp/uv-install.sh
  when: not uv_manager_exists.stat.exists

- name: "Removing Netexec"
  apt:
    name: netexec
    state: absent
    purge: yes
  become: true
  become_method: sudo 
  
- name: "Check if NetExec exists"
  stat:
    path: "{{ ansible_env.HOME }}/.local/bin/netexec"
  register: netexec_exists
  changed_when: false

- name: "Check if Certipy exists"
  stat:
    path: "{{ ansible_env.HOME }}/.local/bin/certipy"
  register: certipy_exists
  changed_when: false

- name: "Check if pywhisker exists"
  stat:
    path: "{{ ansible_env.HOME }}/.local/bin/pywhisker"
  register: pywhisker_exists
  changed_when: false

- name: "Check if bloodyAD exists"
  stat: 
    path: "{{ ansible_env.HOME }}/.local/bin/bloodyAD"
  register: bloodyAD_exists
  changed_when: false

- name: "Check if pwntools repository exists"
  stat:
    path: "{{ ansible_env.HOME }}/.local/share/uv/tools/pwntools"
  register: pwntools_exists
  changed_when: false

- name: "Check if gettgtpkinit exists"
  stat: 
    path: "{{ ansible_env.HOME }}/.local/bin/gettgtpkinit"
  register: gettgtpkinit_exists
  changed_when: false

- name: "Installing Netexec, Certipy, pywhisker, bloodyAD, pwntools & gettgtpkinit"
  shell:
    cmd: uv tool install {{ item.url }}
  loop: "{{ UVtoolsGit }}"
  when: not certipy_exists.stat.exists or not netexec_exists.stat.exists or not pywhisker_exists.stat.exists or not bloodyAD_exists.stat.exists or not pwntools_exists.stat.exists or not gettgtpkinit_exists.stat.exists

- name: "Uninstall old Impacket"
  apt:
    name: python3-impacket
    state: absent
    purge: yes
  become: true
  become_method: sudo

- name: "Check if Impacket Exists"
  stat:
    path: "{{ ansible_env.HOME }}/.local/share/uv/tools/impacket/bin"
  register: "impacket_exists"
  changed_when: false

- name: "Check if sshuttle Exists"
  stat:
    path: "{{ ansible_env.HOME }}/.local/bin/sshuttle"
  register: "sshuttle_exists"
  changed_when: false

- name: "Installing {{ item }}"
  shell:
    cmd: uv tool install {{ item }}
  loop: "{{ UVtools }}"
  when: not sshuttle_exists.stat.exists or not impacket_exists.stat.exists
   
- name: "Copying Github Download Template"
  template:
    src: "uv-manager.j2"
    dest: "/tmp/uv-manager.sh"
    mode: 0755

- name: "Executing Bash Script to Install Python UV"
  shell: "/tmp/uv-manager.sh"
  changed_when: false

- name: "Check if targetedKerberoast exists"
  stat:
    path: "{{ ansible_env.HOME }}/.local/bin/targetedKerberoast"
  register: targetedKerberoast
  changed_when: false

- name: "Copying targetedKerberoast to .local/bin"
  copy:
    src: "/tmp/targetedKerberoast/targetedKerberoast.py"
    dest: "{{ ansible_env.HOME }}/.local/bin/targetedKerberoast"
    mode: 0755
  when: not targetedKerberoast.stat.exists

- name: "Check presence of PKINITtools"
  stat:
    path: "/opt/PKINITtools"
  register: PKINITtools
  changed_when: false

- name: "Downloading PKINITtools from Github"
  git:
    repo: https://github.com/dirkjanm/PKINITtools.git
    dest: "/opt/PKINITtools"
    version: master
  become: true
  become_method: sudo
  when: not PKINITtools.stat.exists

- name: "Modifying PKINITtools Directory Owner"
  file:
    path: "/opt/PKINITtools"
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_id }}"
    state: directory
    recurse: true
  become: true
  become_method: sudo
  changed_when: false

- name: "Check the presence of gettgtpkinit.py"
  stat:
    path: "{{ ansible_env.HOME }}/.local/bin/gettgtpkinit"
  register: gettgtpkinit
  changed_when: false

- name: "Adding Dependencies to PKINITtools"
  shell: |
    cd /opt/PKINITtools
    /home/perumalj/.local/bin/uv add --script /opt/PKINITtools/gettgtpkinit.py -r /opt/PKINITtools/requirements.txt
  become: true
  become_method: sudo
  when: not gettgtpkinit.stat.exists

- name: "Tweaking Shebang"
  replace:
    path: "/opt/PKINITtools/gettgtpkinit.py"
    regexp: "#!/usr/bin/env python3"
    replace: "#!/usr/bin/env -S uv run --script"
  become: true
  become_method: sudo

- name: "Adding gettgtpkinit.py to .local/bin"
  copy:
    src: "/opt/PKINITtools/gettgtpkinit.py"
    dest: "{{ ansible_env.HOME }}/.local/bin/gettgtpkinit"
    mode: 0755
  become: true
  become_method: sudo
  when: not gettgtpkinit.stat.exists

- name: "Upgrading UV tools"
  shell: "{{ ansible_env.HOME }}/.local/bin/uv tool upgrade --all"
  when: ansible_distribution == "Ubuntu" or ansible_distribution == "Parrot" or ansible_distribution == "Debian"
  become: true
  become_method: sudo
  changed_when: false
  # ignore_errors: true